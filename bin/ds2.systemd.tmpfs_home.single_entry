#!/bin/sh
set -Ceu;
# noclobber (-C) as really we should be the only one in control of these units.
# if a conflict occurs then the sysadmin has goofed and that's their problem.

usage() { cat >&2 << EOF
# usage: $0 unit_gen_dir srcdir mountpoint uid gid size [opts]
# creates the mount and service units for a single tmpfs home in the given output dir.
# a tmpfs mount unit is generated for mountpoint with the uid/gid set as specified,
# mode 700, which will depend on a unit file doing the actual syncing from srcdir.
# additionally, user@\$uid (the systemd user manager) will be made to RequiresMountsFor=\$home,
# which on most systemd based systems will activate the mount point at login time.
# opts may specify additional extra mount options;
# mandatory options that will be set for the mount unit are uid, gid and size.
EOF
exit 1;
}

if test $# -lt 5 -o $# -gt 6; then usage; fi;

unitdir="$1";
srcdir="$2";
mountpoint="$3";
uid="$4";
gid="$5"
size="$6";
_extra="${7:-}";

extraopts="";
if test -n "$_extra"; then {
	extraopts=",$_extra";
}; fi;

cd "$unitdir";
escaped="$(systemd-escape -p "$mountpoint")";
mountunitname="${escaped}.mount";
servicename="ds2.systemd.tmpfs_home.populate_${escaped}.service";
dropinname="20-ds2.systemd.tmpfs_home.require_homedir.conf";
dropindir="user@${uid}.service.d";

cat >"$servicename" <<EOF
# generated by tmpfs_home

[Unit]
RequiresMountsFor=$mountpoint $srcdir

[Service]
Type=oneshot
RemainAfterExit=no
ExecStart=/usr/bin/rsync -a "${srcdir}/" "${mountpoint}/"
EOF

cat >"$mountunitname" <<EOF
# generated by tmpfs_home

[Unit]
Requires=$servicename
Before=$servicename

[Mount]
What=tmpfs
Type=tmpfs
Where=${mountpoint}
DirectoryMode=000
Options=uid=${uid},gid=${gid},mode=0700,size=${size}${extraopts}
TimeoutSec=0
EOF

test -e "$dropindir" || mkdir "$dropindir";
cd "$dropindir";
cat >"$dropinname" <<EOF
[Unit]
RequiresMountsFor=${mountpoint}
Requires=${servicename}
After=${servicename}
EOF


