#!/bin/sh
set -Ceu;
# noclobber (-C) as really we should be the only one in control of these units.
# if a conflict occurs then the sysadmin has goofed and that's their problem.

usage() { cat >&2 << EOF
# usage: /* set env vars, see below */  $0
# creates the mount and service units for a single tmpfs home in the given output dir.
# a tmpfs mount unit is generated for mountpoint with the uid/gid set as specified,
# mode 700, which will depend on a unit file doing the actual syncing from srcdir.
# additionally, user@\$uid (the systemd user manager) will be made to RequiresMountsFor=\$home,
# which on most systemd based systems will activate the mount point at login time.

# mandatory, non-empty options passed as env vars:
#	unitdir		where to create units
#	srcdir		source files to copy to tmpfs
#	mountpoint	where the tmpfs will be mounted
#	uid		user's UID
#	gid		user's GID
#	size		allocated size of tmpfs

# optional env vars (may be unset):
#	mountopts	extra mount flags for the tmpfs
#	asuser		copy files as specified uid, do not preserve source uid/gid,
#			0/1 (default 0 for legacy compat)

EOF
exit 1;
}



die() {
	echo '#' "$@" >&2;
	exit 1;
}

check() {
	# all used cases of this are supposed to use ${var:?},
	# so if we somehow get this far something is quite broken.
	test -n "$1" || {
		die "a required env var was blank";
	}
}

maybe_print() {
	if test -n "$1"; then echo "$1"; fi;
}







check "${unitdir:?}";
check "${srcdir:?}";
check "${mountpoint:?}";
check "${uid:?}";
check "${gid:?}";
check "${size:?}";

extraopts="";
if test -n "${mountopts:-}"; then {
	extraopts="${mountopts},";
}; fi;

asuser_userline="";
asuser_rsyncopts="";
if test -n "${asuser:-}"; then {
	if test 1 == "${asuser}"; then {
		asuser_userline="User=$uid";
		asuser_rsyncopts=" --no-o --no-g";
	}; else {
		test 0 == "${asuser}" || {
			die "invalid asuser value (must be 0 or 1):" "$asuser";
		};
	}; fi;
}; fi;







genservice() {

	cat << EOF
# generated by tmpfs_home

[Unit]
RequiresMountsFor=$mountpoint $srcdir

[Service]
Type=oneshot
RemainAfterExit=no
EOF

	maybe_print "$asuser_userline";

	cat << EOF
ExecStart=/usr/bin/rsync -a${asuser_rsyncopts} "${srcdir}/" "${mountpoint}/"
EOF

}



genmount() {

	cat <<EOF
# generated by tmpfs_home

[Unit]
Requires=$servicename
Before=$servicename

[Mount]
What=tmpfs
Type=tmpfs
Where=${mountpoint}
DirectoryMode=000
Options=${extraopts}uid=${uid},gid=${gid},mode=0700,size=${size}
TimeoutSec=0
EOF

}



gendropin() {

	cat <<EOF
[Unit]
RequiresMountsFor=${mountpoint}
Requires=${servicename}
After=${servicename}
EOF

}







cd "$unitdir";
escaped="$(systemd-escape -p "$mountpoint")";
mountunitname="${escaped}.mount";
servicename="ds2.systemd.tmpfs_home.populate_${escaped}.service";
dropinname="20-ds2.systemd.tmpfs_home.require_homedir.conf";
dropindir="user@${uid}.service.d";



genservice > "$servicename";

genmount >"$mountunitname";

test -e "$dropindir" || mkdir "$dropindir";
cd "$dropindir";
gendropin >"$dropinname";


